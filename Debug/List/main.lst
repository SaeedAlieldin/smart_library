
AVRASM ver. 2.1.30  D:\Projects\Library_lightingControl\Debug\List\main.asm Tue Jan 05 23:05:27 2021

D:\Projects\Library_lightingControl\Debug\List\main.asm(1083): warning: Register r4 already defined by the .DEF directive
D:\Projects\Library_lightingControl\Debug\List\main.asm(1084): warning: Register r5 already defined by the .DEF directive
D:\Projects\Library_lightingControl\Debug\List\main.asm(1085): warning: Register r7 already defined by the .DEF directive
D:\Projects\Library_lightingControl\Debug\List\main.asm(1086): warning: Register r6 already defined by the .DEF directive
D:\Projects\Library_lightingControl\Debug\List\main.asm(1087): warning: Register r9 already defined by the .DEF directive
D:\Projects\Library_lightingControl\Debug\List\main.asm(1088): warning: Register r8 already defined by the .DEF directive
D:\Projects\Library_lightingControl\Debug\List\main.asm(1089): warning: Register r11 already defined by the .DEF directive
D:\Projects\Library_lightingControl\Debug\List\main.asm(1090): warning: Register r10 already defined by the .DEF directive
D:\Projects\Library_lightingControl\Debug\List\main.asm(1091): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.42 Evaluation
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _students_no=R4
                 	.DEF _students_no_msb=R5
                 	.DEF _hrs=R7
                 	.DEF _mins=R6
                 	.DEF _secs=R9
                 	.DEF _clk_overflow_counter=R8
                 	.DEF __lcd_x=R11
                 	.DEF __lcd_y=R10
                 	.DEF __lcd_maxx=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004b 	JMP  __RESET
000002 940c 01a4 	JMP  _ENTER_DOOR
000004 940c 01a7 	JMP  _EXIT_DOOR
000006 940c 0000 	JMP  0x00
000008 940c 0187 	JMP  _Clock
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000033 0607
000034 0405
000035 0102
000036 0300      	.DB  0x7,0x6,0x5,0x4,0x2,0x1,0x0,0x3
000037 0302      	.DB  0x2,0x3
                 _0x0:
000038 7525
000039 253a
00003a 3a75
00003b 7525      	.DB  0x25,0x75,0x3A,0x25,0x75,0x3A,0x25,0x75
00003c 4600
00003d 4c55
00003e 214c
00003f 2500      	.DB  0x0,0x46,0x55,0x4C,0x4C,0x21,0x0,0x25
000040 2075
000041 7473
000042 6475
000043 6e65      	.DB  0x75,0x20,0x73,0x74,0x75,0x64,0x65,0x6E
000044 7374
D:\Projects\Library_lightingControl\Debug\List\main.asm(1135): warning: .cseg .db misalignment - padding zero byte
000045 0000      	.DB  0x74,0x73,0x0
                 _0x2000003:
000046 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000047 0002      	.DW  0x02
000048 0160      	.DW  __base_y_G100
000049 008c      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00004a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004b 94f8      	CLI
00004c 27ee      	CLR  R30
00004d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004e e0f1      	LDI  R31,1
00004f bffb      	OUT  GICR,R31
000050 bfeb      	OUT  GICR,R30
000051 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000052 e08d      	LDI  R24,(14-2)+1
000053 e0a2      	LDI  R26,2
000054 27bb      	CLR  R27
                 __CLEAR_REG:
000055 93ed      	ST   X+,R30
000056 958a      	DEC  R24
000057 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000058 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000059 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00005b 93ed      	ST   X+,R30
00005c 9701      	SBIW R24,1
00005d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005e e8ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000060 9185      	LPM  R24,Z+
000061 9195      	LPM  R25,Z+
000062 9700      	SBIW R24,0
000063 f061      	BREQ __GLOBAL_INI_END
000064 91a5      	LPM  R26,Z+
000065 91b5      	LPM  R27,Z+
000066 9005      	LPM  R0,Z+
000067 9015      	LPM  R1,Z+
000068 01bf      	MOVW R22,R30
000069 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006a 9005      	LPM  R0,Z+
00006b 920d      	ST   X+,R0
00006c 9701      	SBIW R24,1
00006d f7e1      	BRNE __GLOBAL_INI_LOOP
00006e 01fb      	MOVW R30,R22
00006f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000070 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000071 bfed      	OUT  SPL,R30
000072 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000073 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000074 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000075 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000076 940c 0078 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;void init_ADC(void);
                 ;unsigned int read_ADC (unsigned char channel);
                 ;void main(void)
                 ; 0000 0017 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0018 /* Local Variables Initialization */
                 ; 0000 0019 unsigned int temperatureRead_c, temp_adc;   // Temperature Reading in Celsius and ADC conversion of temperature
                 ; 0000 001A unsigned char temperatureSensor_channel = 3;  // Temperature Sensor (LM35) pin channel for ADC Conversion (A3)
                 ; 0000 001B unsigned char temperatureSensor = PINA3;  //Naming Temperature Sensor Pin
                 ; 0000 001C unsigned char led = PINC3;    // Naming LED Pin
                 ; 0000 001D unsigned char IR_enter_door = PIND2, IR_exit_door = PIND3;   // Naming IR Sensors Pins (Enter Door D2 & Enter Door D3)
                 ; 0000 001E unsigned char lights1 = PINB0, lights2 = PINB1, lights3 = PINB2;    // Naming Lights Pins (B0, B1, B2)
                 ; 0000 001F unsigned char AC1 = PINB4, AC2 = PINB5, heater1 = PINB6, heater2 = PINB7;  // Naming Air-conditioniners and heaters Pins
                 ; 0000 0020 
                 ; 0000 0021 /* Setting Inputs and Outputs */
                 ; 0000 0022 DDRC |= (1<<led);  // Setting LED Pin as an Output
000078 972a      	SBIW R28,10
000079 e08a      	LDI  R24,10
                +
00007a e060     +LDI R22 , LOW ( 0 )
00007b e070     +LDI R23 , HIGH ( 0 )
                 	__GETWRN 22,23,0
00007c e6e6      	LDI  R30,LOW(_0x3*2)
00007d e0f0      	LDI  R31,HIGH(_0x3*2)
00007e d3cd      	RCALL __INITLOCB
                 ;	temperatureRead_c -> R16,R17
                 ;	temp_adc -> R18,R19
                 ;	temperatureSensor_channel -> R21
                 ;	temperatureSensor -> R20
                 ;	led -> Y+9
                 ;	IR_enter_door -> Y+8
                 ;	IR_exit_door -> Y+7
                 ;	lights1 -> Y+6
                 ;	lights2 -> Y+5
                 ;	lights3 -> Y+4
                 ;	AC1 -> Y+3
                 ;	AC2 -> Y+2
                 ;	heater1 -> Y+1
                 ;	heater2 -> Y+0
00007f e053      	LDI  R21,3
000080 e043      	LDI  R20,3
000081 b214      	IN   R1,20
000082 d333      	RCALL SUBOPT_0x0
000083 bbe4      	OUT  0x14,R30
                 ; 0000 0023 DDRB |= (1<<lights1) | (1<<lights2) | (1<<lights3);  // Setting Lights Pins as Output
000084 b367      	IN   R22,23
000085 81ee      	LDD  R30,Y+6
000086 e0a1      	LDI  R26,LOW(1)
000087 d3d8      	RCALL __LSLB12
000088 2e1e      	MOV  R1,R30
000089 81ed      	LDD  R30,Y+5
00008a d3d5      	RCALL __LSLB12
00008b 2a1e      	OR   R1,R30
00008c d32e      	RCALL SUBOPT_0x1
00008d 2be6      	OR   R30,R22
00008e bbe7      	OUT  0x17,R30
                 ; 0000 0024 DDRA &= ~(1<<temperatureSensor);   // Temperature Sensor Pin is an Input by default
00008f b21a      	IN   R1,26
000090 2fe4      	MOV  R30,R20
000091 d32e      	RCALL SUBOPT_0x2
000092 bbea      	OUT  0x1A,R30
                 ; 0000 0025 DDRB |= (1<<AC1) | (1<<AC2) | (1<<heater1) | (1<<heater2);  // Setting Air-conditioners and Heaters Pins as Outputs
000093 b367      	IN   R22,23
000094 81eb      	LDD  R30,Y+3
000095 e0a1      	LDI  R26,LOW(1)
000096 d3c9      	RCALL __LSLB12
000097 2e1e      	MOV  R1,R30
000098 81ea      	LDD  R30,Y+2
000099 d3c6      	RCALL __LSLB12
00009a 2a1e      	OR   R1,R30
00009b 81e9      	LDD  R30,Y+1
00009c d3c3      	RCALL __LSLB12
00009d 2a1e      	OR   R1,R30
00009e d326      	RCALL SUBOPT_0x3
00009f 2be6      	OR   R30,R22
0000a0 bbe7      	OUT  0x17,R30
                 ; 0000 0026 
                 ; 0000 0027 #asm("sei");  // Enables Global Interrupt(I-bit in SREG)
0000a1 9478      	SEI
                 ; 0000 0028 
                 ; 0000 0029 /* Enabling Timer/Counter2 Interrupt for Clock Code */
                 ; 0000 002A // Timer/Counter2 is in normal mode by default
                 ; 0000 002B TIMSK |= (1<<TOIE2);   // Enables Overflow Interrupt
0000a2 b7e9      	IN   R30,0x39
0000a3 64e0      	ORI  R30,0x40
0000a4 bfe9      	OUT  0x39,R30
                 ; 0000 002C TCCR2 |= (1<<CS22);    // Interrupt Prescalar clk/64
0000a5 b5e5      	IN   R30,0x25
0000a6 60e4      	ORI  R30,4
0000a7 bde5      	OUT  0x25,R30
                 ; 0000 002D 
                 ; 0000 002E /* Enabling External Interrupts for IR sensors */
                 ; 0000 002F PORTD |= (1<<IR_enter_door) | (1<<IR_exit_door);   // Enabling PULL-UP Resistors for IR Sensors(External Interrupts)
0000a8 b362      	IN   R22,18
0000a9 85e8      	LDD  R30,Y+8
0000aa e0a1      	LDI  R26,LOW(1)
0000ab d3b4      	RCALL __LSLB12
0000ac 2e1e      	MOV  R1,R30
0000ad 81ef      	LDD  R30,Y+7
0000ae d3b1      	RCALL __LSLB12
0000af 29e1      	OR   R30,R1
0000b0 2be6      	OR   R30,R22
0000b1 bbe2      	OUT  0x12,R30
                 ; 0000 0030 GICR |=  (1<<INT0) | (1<<INT1); // Enables External Interrupts (INT0 and INT1) for IR Sensors
0000b2 b7eb      	IN   R30,0x3B
0000b3 6ce0      	ORI  R30,LOW(0xC0)
0000b4 bfeb      	OUT  0x3B,R30
                 ; 0000 0031 MCUCR |= (1<<ISC01);  // Falling Edge of INT0 generates an interrupt request
0000b5 b7e5      	IN   R30,0x35
0000b6 60e2      	ORI  R30,2
0000b7 bfe5      	OUT  0x35,R30
                 ; 0000 0032 MCUCR |= (1<<ISC11);  // Falling Edge of INT1 generates an interrupt request
0000b8 b7e5      	IN   R30,0x35
0000b9 60e8      	ORI  R30,8
0000ba bfe5      	OUT  0x35,R30
                 ; 0000 0033 
                 ; 0000 0034 /* ADC Initialization */
                 ; 0000 0035 init_ADC();
0000bb d0f3      	RCALL _init_ADC
                 ; 0000 0036 
                 ; 0000 0037 /* LCD Initialization */
                 ; 0000 0038 lcd_init(16);
0000bc e1a0      	LDI  R26,LOW(16)
0000bd d15e      	RCALL _lcd_init
                 ; 0000 0039 
                 ; 0000 003A 
                 ; 0000 003B /* *********** Infinite Loop ****************************************************************************************************/
                 ; 0000 003C while (1)
                 _0x4:
                 ; 0000 003D {
                 ; 0000 003E /* ****** Temperature Calculation ***************************************************************** */
                 ; 0000 003F 
                 ; 0000 0040 temp_adc = read_ADC(temperatureSensor_channel);  //wrong value
0000be 2fa5      	MOV  R26,R21
0000bf d0f6      	RCALL _read_ADC
0000c0 019f      	MOVW R18,R30
                 ; 0000 0041 temperatureRead_c = (temp_adc*5/255)*100;        //wrong value
                +
0000c1 e0a5     +LDI R26 , 5
0000c2 9fa2     +MUL R26 , R18
0000c3 01f0     +MOVW R30 , R0
0000c4 9fa3     +MUL R26 , R19
0000c5 0df0     +ADD R31 , R0
                 	__MULBNWRU 18,19,5
0000c6 01df      	MOVW R26,R30
0000c7 efef      	LDI  R30,LOW(255)
0000c8 e0f0      	LDI  R31,HIGH(255)
0000c9 d3ab      	RCALL __DIVW21U
0000ca e6a4      	LDI  R26,LOW(100)
0000cb e0b0      	LDI  R27,HIGH(100)
0000cc d3a0      	RCALL __MULW12U
0000cd 018f      	MOVW R16,R30
                 ; 0000 0042 delay_ms(100);
0000ce e6a4      	LDI  R26,LOW(100)
0000cf e0b0      	LDI  R27,0
0000d0 d3c4      	RCALL _delay_ms
                 ; 0000 0043 
                 ; 0000 0044 /* ****** Displaying Time, Temperature(C) and Students Number on LCD ****************************** */
                 ; 0000 0045 lcd_printf("%u:%u:%u", hrs, mins, secs);    // Clock Format HH:MM:SS (top left)
                +
0000d1 e7e0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000d2 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000d3 93fa      	ST   -Y,R31
0000d4 93ea      	ST   -Y,R30
0000d5 2de7      	MOV  R30,R7
0000d6 d2f3      	RCALL SUBOPT_0x4
0000d7 2de6      	MOV  R30,R6
0000d8 d2f1      	RCALL SUBOPT_0x4
0000d9 2de9      	MOV  R30,R9
0000da d2ef      	RCALL SUBOPT_0x4
0000db e08c      	LDI  R24,12
0000dc d29d      	RCALL _lcd_printf
0000dd 962e      	ADIW R28,14
                 ; 0000 0046 lcd_gotoxy(0,1); lcd_printf("%u", temperatureRead_c);    // Temperature in Celsius (bottom left)
0000de e0e0      	LDI  R30,LOW(0)
0000df 93ea      	ST   -Y,R30
0000e0 e0a1      	LDI  R26,LOW(1)
0000e1 d10b      	RCALL _lcd_gotoxy
                +
0000e2 e7e6     +LDI R30 , LOW ( 2 * _0x0 + ( 6 ) )
0000e3 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW1FN _0x0,6
0000e4 93fa      	ST   -Y,R31
0000e5 93ea      	ST   -Y,R30
0000e6 01f8      	MOVW R30,R16
0000e7 2766      	CLR  R22
0000e8 2777      	CLR  R23
0000e9 d2e5      	RCALL SUBOPT_0x5
                 ; 0000 0047 
                 ; 0000 0048 /* Number of students Inside library (bottom right of LCD) */
                 ; 0000 0049 if(students_no >= 25)
0000ea e1e9      	LDI  R30,LOW(25)
0000eb e0f0      	LDI  R31,HIGH(25)
0000ec 164e      	CP   R4,R30
0000ed 065f      	CPC  R5,R31
0000ee f07c      	BRLT _0x7
                 ; 0000 004A {
                 ; 0000 004B lcd_gotoxy(11,1); lcd_printf("FULL!");    // Display "FULL!" When there are 25 or more students
0000ef e0eb      	LDI  R30,LOW(11)
0000f0 93ea      	ST   -Y,R30
0000f1 e0a1      	LDI  R26,LOW(1)
0000f2 d0fa      	RCALL _lcd_gotoxy
                +
0000f3 e7e9     +LDI R30 , LOW ( 2 * _0x0 + ( 9 ) )
0000f4 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 9 ) )
                 	__POINTW1FN _0x0,9
0000f5 93fa      	ST   -Y,R31
0000f6 93ea      	ST   -Y,R30
0000f7 e080      	LDI  R24,0
0000f8 d281      	RCALL _lcd_printf
0000f9 9622      	ADIW R28,2
                 ; 0000 004C PORTC |=  (1<<led);     // Turn On Red LED
0000fa b215      	IN   R1,21
0000fb d2ba      	RCALL SUBOPT_0x0
0000fc bbe5      	OUT  0x15,R30
                 ; 0000 004D }
                 ; 0000 004E else if (students_no > 0)
0000fd c00d      	RJMP _0x8
                 _0x7:
0000fe 2400      	CLR  R0
0000ff 1404      	CP   R0,R4
000100 0405      	CPC  R0,R5
000101 f434      	BRGE _0x9
                 ; 0000 004F {
                 ; 0000 0050 lcd_gotoxy(5,1); lcd_printf("%u students", students_no);  // Display the Number of Students Inside Library
000102 d2d1      	RCALL SUBOPT_0x6
                 ; 0000 0051 PORTC &= ~(1<<led);    // Turn Off Red LED
000103 b215      	IN   R1,21
000104 85e9      	LDD  R30,Y+9
000105 d2ba      	RCALL SUBOPT_0x2
000106 bbe5      	OUT  0x15,R30
                 ; 0000 0052 }
                 ; 0000 0053 else  // When There are No Students
000107 c003      	RJMP _0xA
                 _0x9:
                 ; 0000 0054 {
                 ; 0000 0055 students_no = 0;
000108 2444      	CLR  R4
000109 2455      	CLR  R5
                 ; 0000 0056 lcd_gotoxy(5,1); lcd_printf("%u students", students_no);
00010a d2c9      	RCALL SUBOPT_0x6
                 ; 0000 0057 }
                 _0xA:
                 _0x8:
                 ; 0000 0058 
                 ; 0000 0059 /* ******* Lights Control *********************************************** */
                 ; 0000 005A if (students_no <= 10 && students_no > 0)
00010b d2d3      	RCALL SUBOPT_0x7
00010c f024      	BRLT _0xC
00010d 2400      	CLR  R0
00010e 1404      	CP   R0,R4
00010f 0405      	CPC  R0,R5
000110 f00c      	BRLT _0xD
                 _0xC:
000111 c002      	RJMP _0xB
                 _0xD:
                 ; 0000 005B {
                 ; 0000 005C PORTB |=  (1<<lights1);          //Lights group 1 ON
000112 d2d1      	RCALL SUBOPT_0x8
000113 c013      	RJMP _0x30
                 ; 0000 005D PORTB &= ~(1<<lights2);          //Lights group 2 OFF
                 ; 0000 005E PORTB &= ~(1<<lights3);          //Lights group 3 OFF
                 ; 0000 005F }
                 ; 0000 0060 else if (students_no <= 20 && students_no > 10)
                 _0xB:
000114 d2d5      	RCALL SUBOPT_0x9
000115 f014      	BRLT _0x10
000116 d2c8      	RCALL SUBOPT_0x7
000117 f00c      	BRLT _0x11
                 _0x10:
000118 c003      	RJMP _0xF
                 _0x11:
                 ; 0000 0061 {
                 ; 0000 0062 PORTB |=  (1<<lights1);          //Lights group 1 ON
000119 d2ca      	RCALL SUBOPT_0x8
00011a d2d4      	RCALL SUBOPT_0xA
                 ; 0000 0063 PORTB |=  (1<<lights2);          //Lights group 2 ON
00011b c00f      	RJMP _0x31
                 ; 0000 0064 PORTB &= ~(1<<lights3);          //Lights group 3 OFF
                 ; 0000 0065 }
                 ; 0000 0066 else if (students_no > 20)
                 _0xF:
00011c d2cd      	RCALL SUBOPT_0x9
00011d f434      	BRGE _0x13
                 ; 0000 0067 {
                 ; 0000 0068 PORTB |= (1<<lights1);           //Lights group 1 ON
00011e d2c5      	RCALL SUBOPT_0x8
00011f d2cf      	RCALL SUBOPT_0xA
                 ; 0000 0069 PORTB |= (1<<lights2);           //Lights group 2 ON
000120 bbe8      	OUT  0x18,R30
                 ; 0000 006A PORTB |= (1<<lights3);           //Lights group 3 ON
000121 b218      	IN   R1,24
000122 d298      	RCALL SUBOPT_0x1
000123 c00b      	RJMP _0x32
                 ; 0000 006B }
                 ; 0000 006C else
                 _0x13:
                 ; 0000 006D {
                 ; 0000 006E PORTB &= ~(1<<lights1);          //Lights group 1 OFF
000124 b218      	IN   R1,24
000125 81ee      	LDD  R30,Y+6
000126 d299      	RCALL SUBOPT_0x2
                 _0x30:
000127 bbe8      	OUT  0x18,R30
                 ; 0000 006F PORTB &= ~(1<<lights2);          //Lights group 2 OFF
000128 b218      	IN   R1,24
000129 81ed      	LDD  R30,Y+5
00012a d295      	RCALL SUBOPT_0x2
                 _0x31:
00012b bbe8      	OUT  0x18,R30
                 ; 0000 0070 PORTB &= ~(1<<lights3);          //Lights group 3 OFF
00012c b218      	IN   R1,24
00012d 81ec      	LDD  R30,Y+4
00012e d291      	RCALL SUBOPT_0x2
                 _0x32:
00012f bbe8      	OUT  0x18,R30
                 ; 0000 0071 }
                 ; 0000 0072 
                 ; 0000 0073 /* ****** Air-Conditioners and Heaters ********************************* */
                 ; 0000 0074 if (temperatureRead_c <= 10 && temperatureRead_c >= 0 )
                +
000130 300b     +CPI R16 , LOW ( 11 )
000131 e0e0     +LDI R30 , HIGH ( 11 )
000132 071e     +CPC R17 , R30
                 	__CPWRN 16,17,11
000133 f418      	BRSH _0x16
000134 5000      	SUBI R16,0
000135 4010      	SBCI R17,0
000136 f408      	BRSH _0x17
                 _0x16:
000137 c005      	RJMP _0x15
                 _0x17:
                 ; 0000 0075 {
                 ; 0000 0076 PORTB |=  (1<<heater1);   // Heater 1 is ON
000138 d2bd      	RCALL SUBOPT_0xB
                 ; 0000 0077 PORTB |=  (1<<heater2);   // Heater 2 is ON
000139 d28b      	RCALL SUBOPT_0x3
00013a d2c3      	RCALL SUBOPT_0xC
                 ; 0000 0078 PORTB &= ~(1<<AC1);       // Air-conditioner 1 is OFF
00013b d2c6      	RCALL SUBOPT_0xD
                 ; 0000 0079 PORTB &= ~(1<<AC2);       // Air-conditioner 2 is OFF
00013c c043      	RJMP _0x33
                 ; 0000 007A }
                 ; 0000 007B else if (temperatureRead_c > 10 && temperatureRead_c <= 20)
                 _0x15:
                +
00013d 300b     +CPI R16 , LOW ( 11 )
00013e e0e0     +LDI R30 , HIGH ( 11 )
00013f 071e     +CPC R17 , R30
                 	__CPWRN 16,17,11
000140 f020      	BRLO _0x1A
                +
000141 3105     +CPI R16 , LOW ( 21 )
000142 e0e0     +LDI R30 , HIGH ( 21 )
000143 071e     +CPC R17 , R30
                 	__CPWRN 16,17,21
000144 f008      	BRLO _0x1B
                 _0x1A:
000145 c006      	RJMP _0x19
                 _0x1B:
                 ; 0000 007C {
                 ; 0000 007D PORTB |=  (1<<heater1);   // Heater 1 is ON
000146 d2af      	RCALL SUBOPT_0xB
                 ; 0000 007E PORTB &= ~(1<<heater2);   // Heater 2 is OFF
000147 81e8      	LD   R30,Y
000148 d277      	RCALL SUBOPT_0x2
000149 d2b4      	RCALL SUBOPT_0xC
                 ; 0000 007F PORTB &= ~(1<<AC1);       // Air-conditioner 1 is OFF
00014a d2b7      	RCALL SUBOPT_0xD
                 ; 0000 0080 PORTB &= ~(1<<AC2);       // Air-conditioner 2 is OFF
00014b c034      	RJMP _0x33
                 ; 0000 0081 }
                 ; 0000 0082 else if (temperatureRead_c > 20 && temperatureRead_c <= 30)
                 _0x19:
                +
00014c 3105     +CPI R16 , LOW ( 21 )
00014d e0e0     +LDI R30 , HIGH ( 21 )
00014e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,21
00014f f020      	BRLO _0x1E
                +
000150 310f     +CPI R16 , LOW ( 31 )
000151 e0e0     +LDI R30 , HIGH ( 31 )
000152 071e     +CPC R17 , R30
                 	__CPWRN 16,17,31
000153 f008      	BRLO _0x1F
                 _0x1E:
000154 c007      	RJMP _0x1D
                 _0x1F:
                 ; 0000 0083 {
                 ; 0000 0084 PORTB &= ~(1<<heater1);   // Heater 1 is OFF
000155 b218      	IN   R1,24
000156 81e9      	LDD  R30,Y+1
000157 d268      	RCALL SUBOPT_0x2
000158 d2ad      	RCALL SUBOPT_0xE
                 ; 0000 0085 PORTB &= ~(1<<heater2);   // Heater 2 is OFF
000159 d2a4      	RCALL SUBOPT_0xC
                 ; 0000 0086 PORTB &= ~(1<<AC1);       // Air-conditioner 1 is OFF
00015a d2a7      	RCALL SUBOPT_0xD
                 ; 0000 0087 PORTB &= ~(1<<AC2);       // Air-conditioner 2 is OFF
00015b c024      	RJMP _0x33
                 ; 0000 0088 }
                 ; 0000 0089 else if (temperatureRead_c > 30 && temperatureRead_c <= 40)
                 _0x1D:
                +
00015c 310f     +CPI R16 , LOW ( 31 )
00015d e0e0     +LDI R30 , HIGH ( 31 )
00015e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,31
00015f f020      	BRLO _0x22
                +
000160 3209     +CPI R16 , LOW ( 41 )
000161 e0e0     +LDI R30 , HIGH ( 41 )
000162 071e     +CPC R17 , R30
                 	__CPWRN 16,17,41
000163 f008      	BRLO _0x23
                 _0x22:
000164 c007      	RJMP _0x21
                 _0x23:
                 ; 0000 008A {
                 ; 0000 008B PORTB &= ~(1<<heater1);   // Heater 1 is OFF
000165 b218      	IN   R1,24
000166 81e9      	LDD  R30,Y+1
000167 d258      	RCALL SUBOPT_0x2
000168 d29d      	RCALL SUBOPT_0xE
                 ; 0000 008C PORTB &= ~(1<<heater2);   // Heater 2 is OFF
000169 d2a0      	RCALL SUBOPT_0xF
                 ; 0000 008D PORTB |=  (1<<AC1);       // Air-conditioner 1 is ON
00016a d297      	RCALL SUBOPT_0xD
                 ; 0000 008E PORTB &= ~(1<<AC2);       // Air-conditioner 2 is OFF
00016b c014      	RJMP _0x33
                 ; 0000 008F }
                 ; 0000 0090 else if (temperatureRead_c > 40 && temperatureRead_c <= 50)
                 _0x21:
                +
00016c 3209     +CPI R16 , LOW ( 41 )
00016d e0e0     +LDI R30 , HIGH ( 41 )
00016e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,41
00016f f020      	BRLO _0x26
                +
000170 3303     +CPI R16 , LOW ( 51 )
000171 e0e0     +LDI R30 , HIGH ( 51 )
000172 071e     +CPC R17 , R30
                 	__CPWRN 16,17,51
000173 f008      	BRLO _0x27
                 _0x26:
000174 c00c      	RJMP _0x25
                 _0x27:
                 ; 0000 0091 {
                 ; 0000 0092 PORTB &= ~(1<<heater1);   // Heater 1 is ON
000175 b218      	IN   R1,24
000176 81e9      	LDD  R30,Y+1
000177 d248      	RCALL SUBOPT_0x2
000178 d28d      	RCALL SUBOPT_0xE
                 ; 0000 0093 PORTB &= ~(1<<heater2);   // Heater 2 is OFF
000179 d290      	RCALL SUBOPT_0xF
                 ; 0000 0094 PORTB |=  (1<<AC1);       // Air-conditioner 1 is ON
00017a bbe8      	OUT  0x18,R30
                 ; 0000 0095 PORTB |=  (1<<AC2);       // Air-conditioner 2 is ON
00017b b218      	IN   R1,24
00017c 81ea      	LDD  R30,Y+2
00017d e0a1      	LDI  R26,LOW(1)
00017e d2e1      	RCALL __LSLB12
00017f 29e1      	OR   R30,R1
                 _0x33:
000180 bbe8      	OUT  0x18,R30
                 ; 0000 0096 }
                 ; 0000 0097 
                 ; 0000 0098 /* LCD Refresh Rate */
                 ; 0000 0099 delay_ms(1000);
                 _0x25:
000181 eea8      	LDI  R26,LOW(1000)
000182 e0b3      	LDI  R27,HIGH(1000)
000183 d311      	RCALL _delay_ms
                 ; 0000 009A lcd_clear();
000184 d07a      	RCALL _lcd_clear
                 ; 0000 009B }
000185 cf38      	RJMP _0x4
                 ; 0000 009C }
                 _0x28:
000186 cfff      	RJMP _0x28
                 ; .FEND
                 ;interrupt [5] void Clock (void)
                 ; 0000 00A2 {
                 _Clock:
                 ; .FSTART _Clock
000187 93ea      	ST   -Y,R30
000188 b7ef      	IN   R30,SREG
000189 93ea      	ST   -Y,R30
                 ; 0000 00A3 clk_overflow_counter++;
00018a 9483      	INC  R8
                 ; 0000 00A4 /*
                 ; 0000 00A5 * Microcontroller Frequency = 1MHz, Prescalar = 64, Timer2 is 8bit => 256 steps
                 ; 0000 00A6 * Frequency / (prescalar * 256 steps) = 61.035 overflows/sec
                 ; 0000 00A7 */
                 ; 0000 00A8 if (clk_overflow_counter >= 61)
00018b e3ed      	LDI  R30,LOW(61)
00018c 168e      	CP   R8,R30
00018d f090      	BRLO _0x29
                 ; 0000 00A9 {
                 ; 0000 00AA secs++; clk_overflow_counter = 0;
00018e 9493      	INC  R9
00018f 2488      	CLR  R8
                 ; 0000 00AB if (secs >= 60)
000190 e3ec      	LDI  R30,LOW(60)
000191 169e      	CP   R9,R30
000192 f068      	BRLO _0x2A
                 ; 0000 00AC {
                 ; 0000 00AD mins++; secs=0;
000193 9463      	INC  R6
000194 2499      	CLR  R9
                 ; 0000 00AE /*
                 ; 0000 00AF * to reduce the acccumulated error resulted from the 0.035 overflow/sec
                 ; 0000 00B0 * we have to add 1 count every 28.5 secs (1/0.035=28.5)
                 ; 0000 00B1 * using approximation we'll add 2 counts for every 60 secs
                 ; 0000 00B2 */
                 ; 0000 00B3 clk_overflow_counter = 2;
000195 e0e2      	LDI  R30,LOW(2)
000196 2e8e      	MOV  R8,R30
                 ; 0000 00B4 if (mins >= 60)
000197 e3ec      	LDI  R30,LOW(60)
000198 166e      	CP   R6,R30
000199 f030      	BRLO _0x2B
                 ; 0000 00B5 {
                 ; 0000 00B6 hrs++; mins=0;
00019a 9473      	INC  R7
00019b 2466      	CLR  R6
                 ; 0000 00B7 if (hrs>=24) hrs=0;
00019c e1e8      	LDI  R30,LOW(24)
00019d 167e      	CP   R7,R30
00019e f008      	BRLO _0x2C
00019f 2477      	CLR  R7
                 ; 0000 00B8 }
                 _0x2C:
                 ; 0000 00B9 }
                 _0x2B:
                 ; 0000 00BA }
                 _0x2A:
                 ; 0000 00BB }
                 _0x29:
0001a0 91e9      	LD   R30,Y+
0001a1 bfef      	OUT  SREG,R30
0001a2 91e9      	LD   R30,Y+
0001a3 9518      	RETI
                 ; .FEND
                 ;interrupt [2] void ENTER_DOOR (void)
                 ; 0000 00BF {students_no++;}   // Someone Entered the Library
                 _ENTER_DOOR:
                 ; .FSTART _ENTER_DOOR
0001a4 d26c      	RCALL SUBOPT_0x10
0001a5 9631      	ADIW R30,1
0001a6 c002      	RJMP _0x34
                 ; .FEND
                 ;interrupt [3] void EXIT_DOOR (void)
                 ; 0000 00C3 {students_no--;}   // Someone Left the Library
                 _EXIT_DOOR:
                 ; .FSTART _EXIT_DOOR
0001a7 d269      	RCALL SUBOPT_0x10
0001a8 9731      	SBIW R30,1
                 _0x34:
0001a9 012f      	MOVW R4,R30
0001aa 91e9      	LD   R30,Y+
0001ab bfef      	OUT  SREG,R30
0001ac 91f9      	LD   R31,Y+
0001ad 91e9      	LD   R30,Y+
0001ae 9518      	RETI
                 ; .FEND
                 ;void init_ADC (void)
                 ; 0000 00C9 {
                 _init_ADC:
                 ; .FSTART _init_ADC
                 ; 0000 00CA ADCSRA |= (1<<ADEN);    // ADC Enable
0001af 9a37      	SBI  0x6,7
                 ; 0000 00CB ADMUX  |= (1<<REFS0);   // AVcc with External Capacitor at AREF pin
0001b0 9a3e      	SBI  0x7,6
                 ; 0000 00CC ADMUX  |= (1<<ADLAR);   // Left Adjust the ADC Result
0001b1 9a3d      	SBI  0x7,5
                 ; 0000 00CD ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);  // Prescalar = 128, 1MHz/128=7812.5
0001b2 b1e6      	IN   R30,0x6
0001b3 60e7      	ORI  R30,LOW(0x7)
0001b4 b9e6      	OUT  0x6,R30
                 ; 0000 00CE }
0001b5 9508      	RET
                 ; .FEND
                 ;unsigned int read_ADC (unsigned char channel)
                 ; 0000 00D2 {
                 _read_ADC:
                 ; .FSTART _read_ADC
                 ; 0000 00D3 channel &= 0b00000111;  // Select ADC Channel Between 0 to 7
0001b6 931a      	ST   -Y,R17
0001b7 2f1a      	MOV  R17,R26
                 ;	channel -> R17
0001b8 7017      	ANDI R17,LOW(7)
                 ; 0000 00D4 ADMUX &= 0xF0;   // Clear Older Channel That was Read Before
0001b9 b1e7      	IN   R30,0x7
0001ba 7fe0      	ANDI R30,LOW(0xF0)
0001bb b9e7      	OUT  0x7,R30
                 ; 0000 00D5 ADMUX |= channel;   // Selecting Where The Analog Input will be Connected for Digital Conversion
0001bc b1e7      	IN   R30,0x7
0001bd 2be1      	OR   R30,R17
0001be b9e7      	OUT  0x7,R30
                 ; 0000 00D6 delay_us(10);    // Wait Till Channel is Read
                +
0001bf e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
0001c0 958a     +DEC R24
0001c1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 00D7 ADCSRA |= (1<<ADSC);  // Start AD Conversion
0001c2 9a36      	SBI  0x6,6
                 ; 0000 00D8 while((ADCSRA & (1<<ADIF)) == 0);	/* Monitor end of conversion interrupt */
                 _0x2D:
0001c3 9b34      	SBIS 0x6,4
0001c4 cffe      	RJMP _0x2D
                 ; 0000 00D9 delay_us(10);
                +
0001c5 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
0001c6 958a     +DEC R24
0001c7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 00DA return ADCH;  // Return Calculated ADC value (8bit not 10bit)
0001c8 b1e5      	IN   R30,0x5
0001c9 e0f0      	LDI  R31,0
0001ca c079      	RJMP _0x2080001
                 ; 0000 00DB }
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0001cb 931a      	ST   -Y,R17
0001cc 2f1a      	MOV  R17,R26
0001cd b3e5      	IN   R30,0x15
0001ce 70ef      	ANDI R30,LOW(0xF)
0001cf 2fae      	MOV  R26,R30
0001d0 2fe1      	MOV  R30,R17
0001d1 7fe0      	ANDI R30,LOW(0xF0)
0001d2 2bea      	OR   R30,R26
0001d3 bbe5      	OUT  0x15,R30
                +
0001d4 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0001d5 958a     +DEC R24
0001d6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0001d7 9aaa      	SBI  0x15,2
                +
0001d8 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0001d9 958a     +DEC R24
0001da f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0001db 98aa      	CBI  0x15,2
                +
0001dc e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0001dd 958a     +DEC R24
0001de f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0001df c064      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001e0 93aa      	ST   -Y,R26
0001e1 81a8      	LD   R26,Y
0001e2 dfe8      	RCALL __lcd_write_nibble_G100
0001e3 81e8          ld    r30,y
0001e4 95e2          swap  r30
0001e5 83e8          st    y,r30
0001e6 81a8      	LD   R26,Y
0001e7 dfe3      	RCALL __lcd_write_nibble_G100
                +
0001e8 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0001e9 958a     +DEC R24
0001ea f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0001eb 9621      	ADIW R28,1
0001ec 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001ed 931a      	ST   -Y,R17
0001ee 930a      	ST   -Y,R16
0001ef 2f1a      	MOV  R17,R26
0001f0 810a      	LDD  R16,Y+2
0001f1 2fe1      	MOV  R30,R17
0001f2 e0f0      	LDI  R31,0
0001f3 5ae0      	SUBI R30,LOW(-__base_y_G100)
0001f4 4ffe      	SBCI R31,HIGH(-__base_y_G100)
0001f5 81e0      	LD   R30,Z
0001f6 0fe0      	ADD  R30,R16
0001f7 2fae      	MOV  R26,R30
0001f8 dfe7      	RCALL __lcd_write_data
0001f9 2eb0      	MOV  R11,R16
0001fa 2ea1      	MOV  R10,R17
0001fb 8119      	LDD  R17,Y+1
0001fc 8108      	LDD  R16,Y+0
0001fd 9623      	ADIW R28,3
0001fe 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001ff e0a2      	LDI  R26,LOW(2)
000200 d216      	RCALL SUBOPT_0x11
000201 e0ac      	LDI  R26,LOW(12)
000202 dfdd      	RCALL __lcd_write_data
000203 e0a1      	LDI  R26,LOW(1)
000204 d212      	RCALL SUBOPT_0x11
000205 e0e0      	LDI  R30,LOW(0)
000206 2eae      	MOV  R10,R30
000207 2ebe      	MOV  R11,R30
000208 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000209 931a      	ST   -Y,R17
00020a 2f1a      	MOV  R17,R26
00020b 301a      	CPI  R17,10
00020c f011      	BREQ _0x2000005
00020d 14bd      	CP   R11,R13
00020e f038      	BRLO _0x2000004
                 _0x2000005:
00020f e0e0      	LDI  R30,LOW(0)
000210 93ea      	ST   -Y,R30
000211 94a3      	INC  R10
000212 2daa      	MOV  R26,R10
000213 dfd9      	RCALL _lcd_gotoxy
000214 301a      	CPI  R17,10
000215 f171      	BREQ _0x2080001
                 _0x2000004:
000216 94b3      	INC  R11
000217 9aa8      	SBI  0x15,0
000218 2fa1      	MOV  R26,R17
000219 dfc6      	RCALL __lcd_write_data
00021a 98a8      	CBI  0x15,0
00021b c028      	RJMP _0x2080001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00021c 931a      	ST   -Y,R17
00021d 2f1a      	MOV  R17,R26
00021e b3e4      	IN   R30,0x14
00021f 6fe0      	ORI  R30,LOW(0xF0)
000220 bbe4      	OUT  0x14,R30
000221 9aa2      	SBI  0x14,2
000222 9aa0      	SBI  0x14,0
000223 9aa1      	SBI  0x14,1
000224 98aa      	CBI  0x15,2
000225 98a8      	CBI  0x15,0
000226 98a9      	CBI  0x15,1
000227 2ed1      	MOV  R13,R17
000228 2fe1      	MOV  R30,R17
000229 58e0      	SUBI R30,-LOW(128)
                +
00022a 93e0 0162+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00022c 2fe1      	MOV  R30,R17
00022d 54e0      	SUBI R30,-LOW(192)
                +
00022e 93e0 0163+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000230 e1a4      	LDI  R26,LOW(20)
000231 e0b0      	LDI  R27,0
000232 d262      	RCALL _delay_ms
000233 d1e7      	RCALL SUBOPT_0x12
000234 d1e6      	RCALL SUBOPT_0x12
000235 d1e5      	RCALL SUBOPT_0x12
000236 e2a0      	LDI  R26,LOW(32)
000237 df93      	RCALL __lcd_write_nibble_G100
                +
000238 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000239 958a     +DEC R24
00023a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00023b e2a8      	LDI  R26,LOW(40)
00023c dfa3      	RCALL __lcd_write_data
00023d e0a4      	LDI  R26,LOW(4)
00023e dfa1      	RCALL __lcd_write_data
00023f e8a5      	LDI  R26,LOW(133)
000240 df9f      	RCALL __lcd_write_data
000241 e0a6      	LDI  R26,LOW(6)
000242 df9d      	RCALL __lcd_write_data
000243 dfbb      	RCALL _lcd_clear
                 _0x2080001:
000244 9119      	LD   R17,Y+
000245 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 __print_G101:
                 ; .FSTART __print_G101
000246 93ba      	ST   -Y,R27
000247 93aa      	ST   -Y,R26
000248 9726      	SBIW R28,6
000249 d1f4      	RCALL __SAVELOCR6
00024a e010      	LDI  R17,0
00024b 85ac      	LDD  R26,Y+12
00024c 85bd      	LDD  R27,Y+12+1
00024d e0e0      	LDI  R30,LOW(0)
00024e e0f0      	LDI  R31,HIGH(0)
00024f 93ed      	ST   X+,R30
000250 93fc      	ST   X,R31
                 _0x2020016:
000251 89ea      	LDD  R30,Y+18
000252 89fb      	LDD  R31,Y+18+1
000253 9631      	ADIW R30,1
000254 8bea      	STD  Y+18,R30
000255 8bfb      	STD  Y+18+1,R31
000256 9731      	SBIW R30,1
000257 91e4      	LPM  R30,Z
000258 2f2e      	MOV  R18,R30
000259 30e0      	CPI  R30,0
00025a f409      	BRNE PC+2
00025b c109      	RJMP _0x2020018
00025c 2fe1      	MOV  R30,R17
00025d 30e0      	CPI  R30,0
00025e f431      	BRNE _0x202001C
00025f 3225      	CPI  R18,37
000260 f411      	BRNE _0x202001D
000261 e011      	LDI  R17,LOW(1)
000262 c001      	RJMP _0x202001E
                 _0x202001D:
000263 d1bd      	RCALL SUBOPT_0x13
                 _0x202001E:
000264 c0ff      	RJMP _0x202001B
                 _0x202001C:
000265 30e1      	CPI  R30,LOW(0x1)
000266 f4a1      	BRNE _0x202001F
000267 3225      	CPI  R18,37
000268 f411      	BRNE _0x2020020
000269 d1b7      	RCALL SUBOPT_0x13
00026a c0f8      	RJMP _0x20200CC
                 _0x2020020:
00026b e012      	LDI  R17,LOW(2)
00026c e040      	LDI  R20,LOW(0)
00026d e000      	LDI  R16,LOW(0)
00026e 322d      	CPI  R18,45
00026f f411      	BRNE _0x2020021
000270 e001      	LDI  R16,LOW(1)
000271 c0f2      	RJMP _0x202001B
                 _0x2020021:
000272 322b      	CPI  R18,43
000273 f411      	BRNE _0x2020022
000274 e24b      	LDI  R20,LOW(43)
000275 c0ee      	RJMP _0x202001B
                 _0x2020022:
000276 3220      	CPI  R18,32
000277 f411      	BRNE _0x2020023
000278 e240      	LDI  R20,LOW(32)
000279 c0ea      	RJMP _0x202001B
                 _0x2020023:
00027a c002      	RJMP _0x2020024
                 _0x202001F:
00027b 30e2      	CPI  R30,LOW(0x2)
00027c f439      	BRNE _0x2020025
                 _0x2020024:
00027d e050      	LDI  R21,LOW(0)
00027e e013      	LDI  R17,LOW(3)
00027f 3320      	CPI  R18,48
000280 f411      	BRNE _0x2020026
000281 6800      	ORI  R16,LOW(128)
000282 c0e1      	RJMP _0x202001B
                 _0x2020026:
000283 c003      	RJMP _0x2020027
                 _0x2020025:
000284 30e3      	CPI  R30,LOW(0x3)
000285 f009      	BREQ PC+2
000286 c0dd      	RJMP _0x202001B
                 _0x2020027:
000287 3320      	CPI  R18,48
000288 f010      	BRLO _0x202002A
000289 332a      	CPI  R18,58
00028a f008      	BRLO _0x202002B
                 _0x202002A:
00028b c007      	RJMP _0x2020029
                 _0x202002B:
00028c e0aa      	LDI  R26,LOW(10)
00028d 9f5a      	MUL  R21,R26
00028e 2d50      	MOV  R21,R0
00028f 2fe2      	MOV  R30,R18
000290 53e0      	SUBI R30,LOW(48)
000291 0f5e      	ADD  R21,R30
000292 c0d1      	RJMP _0x202001B
                 _0x2020029:
000293 2fe2      	MOV  R30,R18
000294 36e3      	CPI  R30,LOW(0x63)
000295 f439      	BRNE _0x202002F
000296 d191      	RCALL SUBOPT_0x14
000297 89e8      	LDD  R30,Y+16
000298 89f9      	LDD  R31,Y+16+1
000299 81a4      	LDD  R26,Z+4
00029a 93aa      	ST   -Y,R26
00029b d192      	RCALL SUBOPT_0x15
00029c c0c6      	RJMP _0x2020030
                 _0x202002F:
00029d 37e3      	CPI  R30,LOW(0x73)
00029e f429      	BRNE _0x2020032
00029f d188      	RCALL SUBOPT_0x14
0002a0 d193      	RCALL SUBOPT_0x16
0002a1 d0fb      	RCALL _strlen
0002a2 2f1e      	MOV  R17,R30
0002a3 c007      	RJMP _0x2020033
                 _0x2020032:
0002a4 37e0      	CPI  R30,LOW(0x70)
0002a5 f449      	BRNE _0x2020035
0002a6 d181      	RCALL SUBOPT_0x14
0002a7 d18c      	RCALL SUBOPT_0x16
0002a8 d100      	RCALL _strlenf
0002a9 2f1e      	MOV  R17,R30
0002aa 6008      	ORI  R16,LOW(8)
                 _0x2020033:
0002ab 6002      	ORI  R16,LOW(2)
0002ac 770f      	ANDI R16,LOW(127)
0002ad e030      	LDI  R19,LOW(0)
0002ae c038      	RJMP _0x2020036
                 _0x2020035:
0002af 36e4      	CPI  R30,LOW(0x64)
0002b0 f011      	BREQ _0x2020039
0002b1 36e9      	CPI  R30,LOW(0x69)
0002b2 f411      	BRNE _0x202003A
                 _0x2020039:
0002b3 6004      	ORI  R16,LOW(4)
0002b4 c002      	RJMP _0x202003B
                 _0x202003A:
0002b5 37e5      	CPI  R30,LOW(0x75)
0002b6 f431      	BRNE _0x202003C
                 _0x202003B:
0002b7 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
0002b8 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0002b9 83ee      	STD  Y+6,R30
0002ba 83ff      	STD  Y+6+1,R31
0002bb e015      	LDI  R17,LOW(5)
0002bc c00c      	RJMP _0x202003D
                 _0x202003C:
0002bd 35e8      	CPI  R30,LOW(0x58)
0002be f411      	BRNE _0x202003F
0002bf 6008      	ORI  R16,LOW(8)
0002c0 c003      	RJMP _0x2020040
                 _0x202003F:
0002c1 37e8      	CPI  R30,LOW(0x78)
0002c2 f009      	BREQ PC+2
0002c3 c09f      	RJMP _0x2020071
                 _0x2020040:
0002c4 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
0002c5 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
0002c6 83ee      	STD  Y+6,R30
0002c7 83ff      	STD  Y+6+1,R31
0002c8 e014      	LDI  R17,LOW(4)
                 _0x202003D:
0002c9 ff02      	SBRS R16,2
0002ca c015      	RJMP _0x2020042
0002cb d15c      	RCALL SUBOPT_0x14
0002cc 89a8      	LDD  R26,Y+16
0002cd 89b9      	LDD  R27,Y+16+1
0002ce 9614      	ADIW R26,4
0002cf 91ed      	LD   R30,X+
0002d0 91fd      	LD   R31,X+
0002d1 87ea      	STD  Y+10,R30
0002d2 87fb      	STD  Y+10+1,R31
0002d3 85ab      	LDD  R26,Y+11
0002d4 23aa      	TST  R26
0002d5 f422      	BRPL _0x2020043
0002d6 d185      	RCALL __ANEGW1
0002d7 87ea      	STD  Y+10,R30
0002d8 87fb      	STD  Y+10+1,R31
0002d9 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
0002da 3040      	CPI  R20,0
0002db f011      	BREQ _0x2020044
0002dc 5f1f      	SUBI R17,-LOW(1)
0002dd c001      	RJMP _0x2020045
                 _0x2020044:
0002de 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
0002df c007      	RJMP _0x2020046
                 _0x2020042:
0002e0 d147      	RCALL SUBOPT_0x14
0002e1 89a8      	LDD  R26,Y+16
0002e2 89b9      	LDD  R27,Y+16+1
0002e3 9614      	ADIW R26,4
0002e4 d1a3      	RCALL __GETW1P
0002e5 87ea      	STD  Y+10,R30
0002e6 87fb      	STD  Y+10+1,R31
                 _0x2020046:
                 _0x2020036:
0002e7 fd00      	SBRC R16,0
0002e8 c010      	RJMP _0x2020047
                 _0x2020048:
0002e9 1715      	CP   R17,R21
0002ea f470      	BRSH _0x202004A
0002eb ff07      	SBRS R16,7
0002ec c008      	RJMP _0x202004B
0002ed ff02      	SBRS R16,2
0002ee c004      	RJMP _0x202004C
0002ef 7f0b      	ANDI R16,LOW(251)
0002f0 2f24      	MOV  R18,R20
0002f1 5011      	SUBI R17,LOW(1)
0002f2 c001      	RJMP _0x202004D
                 _0x202004C:
0002f3 e320      	LDI  R18,LOW(48)
                 _0x202004D:
0002f4 c001      	RJMP _0x202004E
                 _0x202004B:
0002f5 e220      	LDI  R18,LOW(32)
                 _0x202004E:
0002f6 d12a      	RCALL SUBOPT_0x13
0002f7 5051      	SUBI R21,LOW(1)
0002f8 cff0      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
0002f9 2f31      	MOV  R19,R17
0002fa ff01      	SBRS R16,1
0002fb c016      	RJMP _0x202004F
                 _0x2020050:
0002fc 3030      	CPI  R19,0
0002fd f099      	BREQ _0x2020052
0002fe ff03      	SBRS R16,3
0002ff c006      	RJMP _0x2020053
000300 81ee      	LDD  R30,Y+6
000301 81ff      	LDD  R31,Y+6+1
000302 9125      	LPM  R18,Z+
000303 83ee      	STD  Y+6,R30
000304 83ff      	STD  Y+6+1,R31
000305 c005      	RJMP _0x2020054
                 _0x2020053:
000306 81ae      	LDD  R26,Y+6
000307 81bf      	LDD  R27,Y+6+1
000308 912d      	LD   R18,X+
000309 83ae      	STD  Y+6,R26
00030a 83bf      	STD  Y+6+1,R27
                 _0x2020054:
00030b d115      	RCALL SUBOPT_0x13
00030c 3050      	CPI  R21,0
00030d f009      	BREQ _0x2020055
00030e 5051      	SUBI R21,LOW(1)
                 _0x2020055:
00030f 5031      	SUBI R19,LOW(1)
000310 cfeb      	RJMP _0x2020050
                 _0x2020052:
000311 c048      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000312 e320      	LDI  R18,LOW(48)
000313 81ee      	LDD  R30,Y+6
000314 81ff      	LDD  R31,Y+6+1
000315 d176      	RCALL __GETW1PF
000316 87e8      	STD  Y+8,R30
000317 87f9      	STD  Y+8+1,R31
000318 81ee      	LDD  R30,Y+6
000319 81ff      	LDD  R31,Y+6+1
00031a 9632      	ADIW R30,2
00031b 83ee      	STD  Y+6,R30
00031c 83ff      	STD  Y+6+1,R31
                 _0x202005A:
00031d 85e8      	LDD  R30,Y+8
00031e 85f9      	LDD  R31,Y+8+1
00031f 85aa      	LDD  R26,Y+10
000320 85bb      	LDD  R27,Y+10+1
000321 17ae      	CP   R26,R30
000322 07bf      	CPC  R27,R31
000323 f050      	BRLO _0x202005C
000324 5f2f      	SUBI R18,-LOW(1)
000325 85a8      	LDD  R26,Y+8
000326 85b9      	LDD  R27,Y+8+1
000327 85ea      	LDD  R30,Y+10
000328 85fb      	LDD  R31,Y+10+1
000329 1bea      	SUB  R30,R26
00032a 0bfb      	SBC  R31,R27
00032b 87ea      	STD  Y+10,R30
00032c 87fb      	STD  Y+10+1,R31
00032d cfef      	RJMP _0x202005A
                 _0x202005C:
00032e 332a      	CPI  R18,58
00032f f028      	BRLO _0x202005D
000330 ff03      	SBRS R16,3
000331 c002      	RJMP _0x202005E
000332 5f29      	SUBI R18,-LOW(7)
000333 c001      	RJMP _0x202005F
                 _0x202005E:
000334 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
000335 fd04      	SBRC R16,4
000336 c019      	RJMP _0x2020061
000337 3321      	CPI  R18,49
000338 f420      	BRSH _0x2020063
000339 85a8      	LDD  R26,Y+8
00033a 85b9      	LDD  R27,Y+8+1
00033b 9711      	SBIW R26,1
00033c f409      	BRNE _0x2020062
                 _0x2020063:
00033d c009      	RJMP _0x20200CD
                 _0x2020062:
00033e 1753      	CP   R21,R19
00033f f010      	BRLO _0x2020067
000340 ff00      	SBRS R16,0
000341 c001      	RJMP _0x2020068
                 _0x2020067:
000342 c011      	RJMP _0x2020066
                 _0x2020068:
000343 e220      	LDI  R18,LOW(32)
000344 ff07      	SBRS R16,7
000345 c00a      	RJMP _0x2020069
000346 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000347 6100      	ORI  R16,LOW(16)
000348 ff02      	SBRS R16,2
000349 c006      	RJMP _0x202006A
00034a 7f0b      	ANDI R16,LOW(251)
00034b 934a      	ST   -Y,R20
00034c d0e1      	RCALL SUBOPT_0x15
00034d 3050      	CPI  R21,0
00034e f009      	BREQ _0x202006B
00034f 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
000350 d0d0      	RCALL SUBOPT_0x13
000351 3050      	CPI  R21,0
000352 f009      	BREQ _0x202006C
000353 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
000354 5031      	SUBI R19,LOW(1)
000355 85a8      	LDD  R26,Y+8
000356 85b9      	LDD  R27,Y+8+1
000357 9712      	SBIW R26,2
000358 f008      	BRLO _0x2020059
000359 cfb8      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
00035a ff00      	SBRS R16,0
00035b c007      	RJMP _0x202006D
                 _0x202006E:
00035c 3050      	CPI  R21,0
00035d f029      	BREQ _0x2020070
00035e 5051      	SUBI R21,LOW(1)
00035f e2e0      	LDI  R30,LOW(32)
000360 93ea      	ST   -Y,R30
000361 d0cc      	RCALL SUBOPT_0x15
000362 cff9      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
000363 e010      	LDI  R17,LOW(0)
                 _0x202001B:
000364 ceec      	RJMP _0x2020016
                 _0x2020018:
000365 85ac      	LDD  R26,Y+12
000366 85bd      	LDD  R27,Y+12+1
000367 91ed      	LD   R30,X+
000368 91fd      	LD   R31,X+
000369 d0db      	RCALL __LOADLOCR6
00036a 9664      	ADIW R28,20
00036b 9508      	RET
                 ; .FEND
                 _put_lcd_G101:
                 ; .FSTART _put_lcd_G101
00036c d0d3      	RCALL __SAVELOCR4
00036d 018d      	MOVW R16,R26
00036e 813c      	LDD  R19,Y+4
00036f 2fa3      	MOV  R26,R19
000370 de98      	RCALL _lcd_putchar
000371 01d8      	MOVW R26,R16
000372 91ed      	LD   R30,X+
000373 91fd      	LD   R31,X+
000374 9631      	ADIW R30,1
000375 93fe      	ST   -X,R31
000376 93ee      	ST   -X,R30
000377 d0cf      	RCALL __LOADLOCR4
000378 9625      	ADIW R28,5
000379 9508      	RET
                 ; .FEND
                 _lcd_printf:
                 ; .FSTART _lcd_printf
00037a 92ff      	PUSH R15
00037b 2ef8      	MOV  R15,R24
00037c 9726      	SBIW R28,6
00037d 931a      	ST   -Y,R17
00037e 930a      	ST   -Y,R16
00037f 01de      	MOVW R26,R28
000380 9614      	ADIW R26,4
000381 d0d6      	RCALL __ADDW2R15
000382 018d      	MOVW R16,R26
000383 e0e0      	LDI  R30,LOW(0)
000384 83ec      	STD  Y+4,R30
000385 83ed      	STD  Y+4+1,R30
000386 83ee      	STD  Y+6,R30
000387 83ef      	STD  Y+6+1,R30
000388 01de      	MOVW R26,R28
000389 9618      	ADIW R26,8
00038a d0cd      	RCALL __ADDW2R15
00038b 91ed      	LD   R30,X+
00038c 91fd      	LD   R31,X+
00038d 93fa      	ST   -Y,R31
00038e 93ea      	ST   -Y,R30
00038f 931a      	ST   -Y,R17
000390 930a      	ST   -Y,R16
000391 e6ec      	LDI  R30,LOW(_put_lcd_G101)
000392 e0f3      	LDI  R31,HIGH(_put_lcd_G101)
000393 93fa      	ST   -Y,R31
000394 93ea      	ST   -Y,R30
000395 01de      	MOVW R26,R28
000396 9618      	ADIW R26,8
000397 deae      	RCALL __print_G101
000398 8119      	LDD  R17,Y+1
000399 8108      	LDD  R16,Y+0
00039a 9628      	ADIW R28,8
00039b 90ff      	POP  R15
00039c 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00039d 93ba      	ST   -Y,R27
00039e 93aa      	ST   -Y,R26
00039f 91a9          ld   r26,y+
0003a0 91b9          ld   r27,y+
0003a1 27ee          clr  r30
0003a2 27ff          clr  r31
                 strlen0:
0003a3 916d          ld   r22,x+
0003a4 2366          tst  r22
0003a5 f011          breq strlen1
0003a6 9631          adiw r30,1
0003a7 cffb          rjmp strlen0
                 strlen1:
0003a8 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0003a9 93ba      	ST   -Y,R27
0003aa 93aa      	ST   -Y,R26
0003ab 27aa          clr  r26
0003ac 27bb          clr  r27
0003ad 91e9          ld   r30,y+
0003ae 91f9          ld   r31,y+
                 strlenf0:
0003af 9005      	lpm  r0,z+
0003b0 2000          tst  r0
0003b1 f011          breq strlenf1
0003b2 9611          adiw r26,1
0003b3 cffb          rjmp strlenf0
                 strlenf1:
0003b4 01fd          movw r30,r26
0003b5 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0003b6 85e9      	LDD  R30,Y+9
0003b7 e0a1      	LDI  R26,LOW(1)
0003b8 d0a7      	RCALL __LSLB12
0003b9 29e1      	OR   R30,R1
0003ba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0003bb 81ec      	LDD  R30,Y+4
0003bc e0a1      	LDI  R26,LOW(1)
0003bd d0a2      	RCALL __LSLB12
0003be 29e1      	OR   R30,R1
0003bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:52 WORDS
                 SUBOPT_0x2:
0003c0 e0a1      	LDI  R26,LOW(1)
0003c1 d09e      	RCALL __LSLB12
0003c2 95e0      	COM  R30
0003c3 21e1      	AND  R30,R1
0003c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0003c5 81e8      	LD   R30,Y
0003c6 e0a1      	LDI  R26,LOW(1)
0003c7 d098      	RCALL __LSLB12
0003c8 29e1      	OR   R30,R1
0003c9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
0003ca 27ff      	CLR  R31
0003cb 2766      	CLR  R22
0003cc 2777      	CLR  R23
0003cd d0c2      	RCALL __PUTPARD1
0003ce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
0003cf d0c0      	RCALL __PUTPARD1
0003d0 e084      	LDI  R24,4
0003d1 dfa8      	RCALL _lcd_printf
0003d2 9626      	ADIW R28,6
0003d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
0003d4 e0e5      	LDI  R30,LOW(5)
0003d5 93ea      	ST   -Y,R30
0003d6 e0a1      	LDI  R26,LOW(1)
0003d7 de15      	RCALL _lcd_gotoxy
                +
0003d8 e7ef     +LDI R30 , LOW ( 2 * _0x0 + ( 15 ) )
0003d9 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 15 ) )
                 	__POINTW1FN _0x0,15
0003da 93fa      	ST   -Y,R31
0003db 93ea      	ST   -Y,R30
0003dc 01f2      	MOVW R30,R4
0003dd d08a      	RCALL __CWD1
0003de cff0      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0003df e0ea      	LDI  R30,LOW(10)
0003e0 e0f0      	LDI  R31,HIGH(10)
0003e1 15e4      	CP   R30,R4
0003e2 05f5      	CPC  R31,R5
0003e3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x8:
0003e4 b218      	IN   R1,24
0003e5 81ee      	LDD  R30,Y+6
0003e6 e0a1      	LDI  R26,LOW(1)
0003e7 d078      	RCALL __LSLB12
0003e8 29e1      	OR   R30,R1
0003e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0003ea e1e4      	LDI  R30,LOW(20)
0003eb e0f0      	LDI  R31,HIGH(20)
0003ec 15e4      	CP   R30,R4
0003ed 05f5      	CPC  R31,R5
0003ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
0003ef bbe8      	OUT  0x18,R30
0003f0 b218      	IN   R1,24
0003f1 81ed      	LDD  R30,Y+5
0003f2 e0a1      	LDI  R26,LOW(1)
0003f3 d06c      	RCALL __LSLB12
0003f4 29e1      	OR   R30,R1
0003f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xB:
0003f6 b218      	IN   R1,24
0003f7 81e9      	LDD  R30,Y+1
0003f8 e0a1      	LDI  R26,LOW(1)
0003f9 d066      	RCALL __LSLB12
0003fa 29e1      	OR   R30,R1
0003fb bbe8      	OUT  0x18,R30
0003fc b218      	IN   R1,24
0003fd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xC:
0003fe bbe8      	OUT  0x18,R30
0003ff b218      	IN   R1,24
000400 81eb      	LDD  R30,Y+3
000401 cfbe      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xD:
000402 bbe8      	OUT  0x18,R30
000403 b218      	IN   R1,24
000404 81ea      	LDD  R30,Y+2
000405 cfba      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xE:
000406 bbe8      	OUT  0x18,R30
000407 b218      	IN   R1,24
000408 81e8      	LD   R30,Y
000409 cfb6      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
00040a bbe8      	OUT  0x18,R30
00040b b218      	IN   R1,24
00040c 81eb      	LDD  R30,Y+3
00040d e0a1      	LDI  R26,LOW(1)
00040e d051      	RCALL __LSLB12
00040f 29e1      	OR   R30,R1
000410 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x10:
000411 93ea      	ST   -Y,R30
000412 93fa      	ST   -Y,R31
000413 b7ef      	IN   R30,SREG
000414 93ea      	ST   -Y,R30
000415 01f2      	MOVW R30,R4
000416 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
000417 ddc8      	RCALL __lcd_write_data
000418 e0a3      	LDI  R26,LOW(3)
000419 e0b0      	LDI  R27,0
00041a c07a      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x12:
00041b e3a0      	LDI  R26,LOW(48)
00041c ddae      	RCALL __lcd_write_nibble_G100
                +
00041d e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00041e 958a     +DEC R24
00041f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000420 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x13:
000421 932a      	ST   -Y,R18
000422 85ad      	LDD  R26,Y+13
000423 85be      	LDD  R27,Y+13+1
000424 85ef      	LDD  R30,Y+15
000425 89f8      	LDD  R31,Y+15+1
000426 9509      	ICALL
000427 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x14:
000428 89e8      	LDD  R30,Y+16
000429 89f9      	LDD  R31,Y+16+1
00042a 9734      	SBIW R30,4
00042b 8be8      	STD  Y+16,R30
00042c 8bf9      	STD  Y+16+1,R31
00042d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x15:
00042e 85ad      	LDD  R26,Y+13
00042f 85be      	LDD  R27,Y+13+1
000430 85ef      	LDD  R30,Y+15
000431 89f8      	LDD  R31,Y+15+1
000432 9509      	ICALL
000433 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x16:
000434 89a8      	LDD  R26,Y+16
000435 89b9      	LDD  R27,Y+16+1
000436 9614      	ADIW R26,4
000437 91ed      	LD   R30,X+
000438 91fd      	LD   R31,X+
000439 83ee      	STD  Y+6,R30
00043a 83ff      	STD  Y+6+1,R31
00043b 81ae      	LDD  R26,Y+6
00043c 81bf      	LDD  R27,Y+6+1
00043d 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
00043e 935a      	ST   -Y,R21
                 __SAVELOCR5:
00043f 934a      	ST   -Y,R20
                 __SAVELOCR4:
000440 933a      	ST   -Y,R19
                 __SAVELOCR3:
000441 932a      	ST   -Y,R18
                 __SAVELOCR2:
000442 931a      	ST   -Y,R17
000443 930a      	ST   -Y,R16
000444 9508      	RET
                 
                 __LOADLOCR6:
000445 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000446 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000447 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000448 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000449 8119      	LDD  R17,Y+1
00044a 8108      	LD   R16,Y
00044b 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
00044c 93af      	PUSH R26
00044d 93bf      	PUSH R27
00044e 01db      	MOVW R26,R22
00044f 0fac      	ADD  R26,R28
000450 1fbd      	ADC  R27,R29
                 __INITLOC0:
000451 9005      	LPM  R0,Z+
000452 920d      	ST   X+,R0
000453 958a      	DEC  R24
000454 f7e1      	BRNE __INITLOC0
000455 91bf      	POP  R27
000456 91af      	POP  R26
000457 9508      	RET
                 
                 __ADDW2R15:
000458 2400      	CLR  R0
000459 0daf      	ADD  R26,R15
00045a 1db0      	ADC  R27,R0
00045b 9508      	RET
                 
                 __ANEGW1:
00045c 95f1      	NEG  R31
00045d 95e1      	NEG  R30
00045e 40f0      	SBCI R31,0
00045f 9508      	RET
                 
                 __LSLB12:
000460 23ee      	TST  R30
000461 2e0e      	MOV  R0,R30
000462 2fea      	MOV  R30,R26
000463 f019      	BREQ __LSLB12R
                 __LSLB12L:
000464 0fee      	LSL  R30
000465 940a      	DEC  R0
000466 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
000467 9508      	RET
                 
                 __CWD1:
000468 2f6f      	MOV  R22,R31
000469 0f66      	ADD  R22,R22
00046a 0b66      	SBC  R22,R22
00046b 2f76      	MOV  R23,R22
00046c 9508      	RET
                 
                 __MULW12U:
00046d 9ffa      	MUL  R31,R26
00046e 2df0      	MOV  R31,R0
00046f 9feb      	MUL  R30,R27
000470 0df0      	ADD  R31,R0
000471 9fea      	MUL  R30,R26
000472 2de0      	MOV  R30,R0
000473 0df1      	ADD  R31,R1
000474 9508      	RET
                 
                 __DIVW21U:
000475 2400      	CLR  R0
000476 2411      	CLR  R1
000477 e190      	LDI  R25,16
                 __DIVW21U1:
000478 0faa      	LSL  R26
000479 1fbb      	ROL  R27
00047a 1c00      	ROL  R0
00047b 1c11      	ROL  R1
00047c 1a0e      	SUB  R0,R30
00047d 0a1f      	SBC  R1,R31
00047e f418      	BRCC __DIVW21U2
00047f 0e0e      	ADD  R0,R30
000480 1e1f      	ADC  R1,R31
000481 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000482 60a1      	SBR  R26,1
                 __DIVW21U3:
000483 959a      	DEC  R25
000484 f799      	BRNE __DIVW21U1
000485 01fd      	MOVW R30,R26
000486 01d0      	MOVW R26,R0
000487 9508      	RET
                 
                 __GETW1P:
000488 91ed      	LD   R30,X+
000489 91fc      	LD   R31,X
00048a 9711      	SBIW R26,1
00048b 9508      	RET
                 
                 __GETW1PF:
00048c 9005      	LPM  R0,Z+
00048d 91f4      	LPM  R31,Z
00048e 2de0      	MOV  R30,R0
00048f 9508      	RET
                 
                 __PUTPARD1:
000490 937a      	ST   -Y,R23
000491 936a      	ST   -Y,R22
000492 93fa      	ST   -Y,R31
000493 93ea      	ST   -Y,R30
000494 9508      	RET
                 
                 _delay_ms:
000495 9610      	adiw r26,0
000496 f039      	breq __delay_ms1
                 __delay_ms0:
000497 95a8      	wdr
                +
000498 ef8a     +LDI R24 , LOW ( 0xFA )
000499 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
00049a 9701     +SBIW R24 , 1
00049b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
00049c 9711      	sbiw r26,1
00049d f7c9      	brne __delay_ms0
                 __delay_ms1:
00049e 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  31 r1 :  42 r2 :   0 r3 :   0 r4 :   9 r5 :   6 r6 :   4 r7 :   4 
r8 :   4 r9 :   4 r10:   4 r11:   4 r12:   0 r13:   2 r14:   0 r15:   4 
r16:  49 r17:  52 r18:  29 r19:  11 r20:  11 r21:  19 r22:  21 r23:   5 
r24:  31 r25:   5 r26: 110 r27:  34 r28:  16 r29:   2 r30: 298 r31:  77 
x  :  22 y  : 181 z  :  15 
Registers used: 31 out of 35 (88.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   9 
adiw  :  21 and   :   1 andi  :   8 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  16 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  19 
brlt  :   5 brmi  :   0 brne  :  33 brpl  :   1 brsh  :   4 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  22 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   1 
cp    :  13 cpc   :  15 cpi   :  40 cpse  :   0 dec   :  12 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  36 inc   :   6 jmp   :  22 ld    :  32 ldd   :  82 ldi   : 137 
lds   :   0 lpm   :  15 lsl   :   2 lsr   :   0 mov   :  45 movw  :  21 
mul   :   6 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :  17 
ori   :  13 out   :  37 pop   :   3 push  :   3 rcall : 128 ret   :  41 
reti  :   2 rjmp  :  79 rol   :   3 ror   :   0 sbc   :   3 sbci  :   3 
sbi   :   9 sbic  :   0 sbis  :   1 sbiw  :  14 sbr   :   1 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  61 std   :  30 sts   :   2 sub   :   2 subi  :  17 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 61 out of 116 (52.6%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00093e   2300     66   2366   16384  14.4%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
