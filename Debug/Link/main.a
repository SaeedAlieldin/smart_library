;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;void init_ADC(void);
;unsigned int read_ADC (unsigned char channel);
;void main(void)
; 0000 0017 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0018 /* Local Variables Initialization */
; 0000 0019 unsigned int temperatureRead_c, temp_adc;   // Temperature Reading in Celsius and ADC conversion of temperature
; 0000 001A unsigned char temperatureSensor_channel = 3;  // Temperature Sensor (LM35) pin channel for ADC Conversion (A3)
; 0000 001B unsigned char temperatureSensor = PINA3;  //Naming Temperature Sensor Pin
; 0000 001C unsigned char led = PINC3;    // Naming LED Pin
; 0000 001D unsigned char IR_enter_door = PIND2, IR_exit_door = PIND3;   // Naming IR Sensors Pins (Enter Door D2 & Enter Door D3)
; 0000 001E unsigned char lights1 = PINB0, lights2 = PINB1, lights3 = PINB2;    // Naming Lights Pins (B0, B1, B2)
; 0000 001F unsigned char AC1 = PINB4, AC2 = PINB5, heater1 = PINB6, heater2 = PINB7;  // Naming Air-conditioniners and heaters Pins
; 0000 0020 
; 0000 0021 /* Setting Inputs and Outputs */
; 0000 0022 DDRC |= (1<<led);  // Setting LED Pin as an Output
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;	temperatureRead_c -> R16,R17
;	temp_adc -> R18,R19
;	temperatureSensor_channel -> R21
;	temperatureSensor -> R20
;	led -> Y+9
;	IR_enter_door -> Y+8
;	IR_exit_door -> Y+7
;	lights1 -> Y+6
;	lights2 -> Y+5
;	lights3 -> Y+4
;	AC1 -> Y+3
;	AC2 -> Y+2
;	heater1 -> Y+1
;	heater2 -> Y+0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0023 DDRB |= (1<<lights1) | (1<<lights2) | (1<<lights3);  // Setting Lights Pins as Output
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0024 DDRA &= ~(1<<temperatureSensor);   // Temperature Sensor Pin is an Input by default
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0025 DDRB |= (1<<AC1) | (1<<AC2) | (1<<heater1) | (1<<heater2);  // Setting Air-conditioners and Heaters Pins as Outputs
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0026 
; 0000 0027 #asm("sei");  // Enables Global Interrupt(I-bit in SREG)
;PCODE: $0000004E VOL: 0
; 0000 0028 
; 0000 0029 /* Enabling Timer/Counter2 Interrupt for Clock Code */
; 0000 002A // Timer/Counter2 is in normal mode by default
; 0000 002B TIMSK |= (1<<TOIE2);   // Enables Overflow Interrupt
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 002C TCCR2 |= (1<<CS22);    // Interrupt Prescalar clk/64
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 002D 
; 0000 002E /* Enabling External Interrupts for IR sensors */
; 0000 002F PORTD |= (1<<IR_enter_door) | (1<<IR_exit_door);   // Enabling PULL-UP Resistors for IR Sensors(External Interrupts)
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0030 GICR |=  (1<<INT0) | (1<<INT1); // Enables External Interrupts (INT0 and INT1) for IR Sensors
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0031 MCUCR |= (1<<ISC01);  // Falling Edge of INT0 generates an interrupt request
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0032 MCUCR |= (1<<ISC11);  // Falling Edge of INT1 generates an interrupt request
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0033 
; 0000 0034 /* ADC Initialization */
; 0000 0035 init_ADC();
;PCODE: $0000006A VOL: 0
; 0000 0036 
; 0000 0037 /* LCD Initialization */
; 0000 0038 lcd_init(16);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0039 
; 0000 003A 
; 0000 003B /* *********** Infinite Loop ****************************************************************************************************/
; 0000 003C while (1)
;PCODE: $0000006D VOL: 0
; 0000 003D {
; 0000 003E /* ****** Temperature Calculation ***************************************************************** */
; 0000 003F 
; 0000 0040 temp_adc = read_ADC(temperatureSensor_channel);  //wrong value
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0041 temperatureRead_c = (temp_adc*5/255)*100;        //wrong value
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0042 delay_ms(100);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0043 
; 0000 0044 /* ****** Displaying Time, Temperature(C) and Students Number on LCD ****************************** */
; 0000 0045 lcd_printf("%u:%u:%u", hrs, mins, secs);    // Clock Format HH:MM:SS (top left)
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0046 lcd_gotoxy(0,1); lcd_printf("%u", temperatureRead_c);    // Temperature in Celsius (bottom left)
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0047 
; 0000 0048 /* Number of students Inside library (bottom right of LCD) */
; 0000 0049 if(students_no >= 25)
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 004A {
; 0000 004B lcd_gotoxy(11,1); lcd_printf("FULL!");    // Display "FULL!" When there are 25 or more students
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 004C PORTC |=  (1<<led);     // Turn On Red LED
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 004D }
; 0000 004E else if (students_no > 0)
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 004F {
; 0000 0050 lcd_gotoxy(5,1); lcd_printf("%u students", students_no);  // Display the Number of Students Inside Library
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0051 PORTC &= ~(1<<led);    // Turn Off Red LED
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0052 }
; 0000 0053 else  // When There are No Students
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0054 {
; 0000 0055 students_no = 0;
;PCODE: $000000CB VOL: 0
; 0000 0056 lcd_gotoxy(5,1); lcd_printf("%u students", students_no);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0057 }
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0058 
; 0000 0059 /* ******* Lights Control *********************************************** */
; 0000 005A if (students_no <= 10 && students_no > 0)
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 005B {
; 0000 005C PORTB |=  (1<<lights1);          //Lights group 1 ON
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 005D PORTB &= ~(1<<lights2);          //Lights group 2 OFF
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 005E PORTB &= ~(1<<lights3);          //Lights group 3 OFF
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 005F }
; 0000 0060 else if (students_no <= 20 && students_no > 10)
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0061 {
; 0000 0062 PORTB |=  (1<<lights1);          //Lights group 1 ON
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0063 PORTB |=  (1<<lights2);          //Lights group 2 ON
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0064 PORTB &= ~(1<<lights3);          //Lights group 3 OFF
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 0065 }
; 0000 0066 else if (students_no > 20)
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0067 {
; 0000 0068 PORTB |= (1<<lights1);           //Lights group 1 ON
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 0069 PORTB |= (1<<lights2);           //Lights group 2 ON
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 006A PORTB |= (1<<lights3);           //Lights group 3 ON
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 006B }
; 0000 006C else
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 006D {
; 0000 006E PORTB &= ~(1<<lights1);          //Lights group 1 OFF
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 006F PORTB &= ~(1<<lights2);          //Lights group 2 OFF
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0070 PORTB &= ~(1<<lights3);          //Lights group 3 OFF
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0071 }
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 0072 
; 0000 0073 /* ****** Air-Conditioners and Heaters ********************************* */
; 0000 0074 if (temperatureRead_c <= 10 && temperatureRead_c >= 0 )
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0075 {
; 0000 0076 PORTB |=  (1<<heater1);   // Heater 1 is ON
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 0077 PORTB |=  (1<<heater2);   // Heater 2 is ON
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 0078 PORTB &= ~(1<<AC1);       // Air-conditioner 1 is OFF
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0079 PORTB &= ~(1<<AC2);       // Air-conditioner 2 is OFF
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 007A }
; 0000 007B else if (temperatureRead_c > 10 && temperatureRead_c <= 20)
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 007C {
; 0000 007D PORTB |=  (1<<heater1);   // Heater 1 is ON
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 007E PORTB &= ~(1<<heater2);   // Heater 2 is OFF
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 007F PORTB &= ~(1<<AC1);       // Air-conditioner 1 is OFF
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 0080 PORTB &= ~(1<<AC2);       // Air-conditioner 2 is OFF
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 0081 }
; 0000 0082 else if (temperatureRead_c > 20 && temperatureRead_c <= 30)
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0083 {
; 0000 0084 PORTB &= ~(1<<heater1);   // Heater 1 is OFF
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 0085 PORTB &= ~(1<<heater2);   // Heater 2 is OFF
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 0086 PORTB &= ~(1<<AC1);       // Air-conditioner 1 is OFF
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 0087 PORTB &= ~(1<<AC2);       // Air-conditioner 2 is OFF
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 0088 }
; 0000 0089 else if (temperatureRead_c > 30 && temperatureRead_c <= 40)
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 008A {
; 0000 008B PORTB &= ~(1<<heater1);   // Heater 1 is OFF
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 008C PORTB &= ~(1<<heater2);   // Heater 2 is OFF
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 008D PORTB |=  (1<<AC1);       // Air-conditioner 1 is ON
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 008E PORTB &= ~(1<<AC2);       // Air-conditioner 2 is OFF
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 008F }
; 0000 0090 else if (temperatureRead_c > 40 && temperatureRead_c <= 50)
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 0091 {
; 0000 0092 PORTB &= ~(1<<heater1);   // Heater 1 is ON
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 0093 PORTB &= ~(1<<heater2);   // Heater 2 is OFF
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 0094 PORTB |=  (1<<AC1);       // Air-conditioner 1 is ON
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 0095 PORTB |=  (1<<AC2);       // Air-conditioner 2 is ON
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 0096 }
; 0000 0097 
; 0000 0098 /* LCD Refresh Rate */
; 0000 0099 delay_ms(1000);
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 009A lcd_clear();
;PCODE: $0000022F VOL: 0
; 0000 009B }
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 009C }
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;interrupt [5] void Clock (void)
; 0000 00A2 {
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 00A3 clk_overflow_counter++;
;PCODE: $00000238 VOL: 0
; 0000 00A4 /*
; 0000 00A5 * Microcontroller Frequency = 1MHz, Prescalar = 64, Timer2 is 8bit => 256 steps
; 0000 00A6 * Frequency / (prescalar * 256 steps) = 61.035 overflows/sec
; 0000 00A7 */
; 0000 00A8 if (clk_overflow_counter >= 61)
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 00A9 {
; 0000 00AA secs++; clk_overflow_counter = 0;
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 00AB if (secs >= 60)
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 00AC {
; 0000 00AD mins++; secs=0;
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 00AE /*
; 0000 00AF * to reduce the acccumulated error resulted from the 0.035 overflow/sec
; 0000 00B0 * we have to add 1 count every 28.5 secs (1/0.035=28.5)
; 0000 00B1 * using approximation we'll add 2 counts for every 60 secs
; 0000 00B2 */
; 0000 00B3 clk_overflow_counter = 2;
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 00B4 if (mins >= 60)
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 00B5 {
; 0000 00B6 hrs++; mins=0;
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 00B7 if (hrs>=24) hrs=0;
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 00B8 }
;PCODE: $0000024E VOL: 0
; 0000 00B9 }
;PCODE: $0000024F VOL: 0
; 0000 00BA }
;PCODE: $00000250 VOL: 0
; 0000 00BB }
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;interrupt [2] void ENTER_DOOR (void)
; 0000 00BF {students_no++;}   // Someone Entered the Library
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;interrupt [3] void EXIT_DOOR (void)
; 0000 00C3 {students_no--;}   // Someone Left the Library
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;void init_ADC (void)
; 0000 00C9 {
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 00CA ADCSRA |= (1<<ADEN);    // ADC Enable
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 00CB ADMUX  |= (1<<REFS0);   // AVcc with External Capacitor at AREF pin
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 00CC ADMUX  |= (1<<ADLAR);   // Left Adjust the ADC Result
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 00CD ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);  // Prescalar = 128, 1MHz/128=7812.5
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 00CE }
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;unsigned int read_ADC (unsigned char channel)
; 0000 00D2 {
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 00D3 channel &= 0b00000111;  // Select ADC Channel Between 0 to 7
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;	channel -> R17
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 00D4 ADMUX &= 0xF0;   // Clear Older Channel That was Read Before
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 00D5 ADMUX |= channel;   // Selecting Where The Analog Input will be Connected for Digital Conversion
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 00D6 delay_us(10);    // Wait Till Channel is Read
;PCODE: $0000027E VOL: 0
; 0000 00D7 ADCSRA |= (1<<ADSC);  // Start AD Conversion
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 00D8 while((ADCSRA & (1<<ADIF)) == 0);	/* Monitor end of conversion interrupt */
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 00D9 delay_us(10);
;PCODE: $00000287 VOL: 0
; 0000 00DA return ADCH;  // Return Calculated ADC value (8bit not 10bit)
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 00DB }
;PCODE: $0000028C VOL: 0
